# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from protos import lms_pb2 as protos_dot_lms__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in protos/lms_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LMSStub(object):
    """LMS service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/lms.LMS/Login',
                request_serializer=protos_dot_lms__pb2.LoginRequest.SerializeToString,
                response_deserializer=protos_dot_lms__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Post = channel.unary_unary(
                '/lms.LMS/Post',
                request_serializer=protos_dot_lms__pb2.PostRequest.SerializeToString,
                response_deserializer=protos_dot_lms__pb2.PostResponse.FromString,
                _registered_method=True)
        self.Get = channel.unary_unary(
                '/lms.LMS/Get',
                request_serializer=protos_dot_lms__pb2.GetRequest.SerializeToString,
                response_deserializer=protos_dot_lms__pb2.GetResponse.FromString,
                _registered_method=True)
        self.Grade = channel.unary_unary(
                '/lms.LMS/Grade',
                request_serializer=protos_dot_lms__pb2.GradeRequest.SerializeToString,
                response_deserializer=protos_dot_lms__pb2.GradeResponse.FromString,
                _registered_method=True)
        self.GetLlmAnswer = channel.unary_unary(
                '/lms.LMS/GetLlmAnswer',
                request_serializer=protos_dot_lms__pb2.LMS_LLMQueryRequest.SerializeToString,
                response_deserializer=protos_dot_lms__pb2.LMS_LLMResponse.FromString,
                _registered_method=True)
        self.AnswerQuery = channel.unary_unary(
                '/lms.LMS/AnswerQuery',
                request_serializer=protos_dot_lms__pb2.AnswerQueryRequest.SerializeToString,
                response_deserializer=protos_dot_lms__pb2.AnswerQueryResponse.FromString,
                _registered_method=True)


class LMSServicer(object):
    """LMS service definition
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Post(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Grade(self, request, context):
        """RPC for grading
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLlmAnswer(self, request, context):
        """RPC for retrieving answer from LLM - tutoring server 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnswerQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LMSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=protos_dot_lms__pb2.LoginRequest.FromString,
                    response_serializer=protos_dot_lms__pb2.LoginResponse.SerializeToString,
            ),
            'Post': grpc.unary_unary_rpc_method_handler(
                    servicer.Post,
                    request_deserializer=protos_dot_lms__pb2.PostRequest.FromString,
                    response_serializer=protos_dot_lms__pb2.PostResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=protos_dot_lms__pb2.GetRequest.FromString,
                    response_serializer=protos_dot_lms__pb2.GetResponse.SerializeToString,
            ),
            'Grade': grpc.unary_unary_rpc_method_handler(
                    servicer.Grade,
                    request_deserializer=protos_dot_lms__pb2.GradeRequest.FromString,
                    response_serializer=protos_dot_lms__pb2.GradeResponse.SerializeToString,
            ),
            'GetLlmAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLlmAnswer,
                    request_deserializer=protos_dot_lms__pb2.LMS_LLMQueryRequest.FromString,
                    response_serializer=protos_dot_lms__pb2.LMS_LLMResponse.SerializeToString,
            ),
            'AnswerQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.AnswerQuery,
                    request_deserializer=protos_dot_lms__pb2.AnswerQueryRequest.FromString,
                    response_serializer=protos_dot_lms__pb2.AnswerQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.LMS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.LMS', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LMS(object):
    """LMS service definition
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Login',
            protos_dot_lms__pb2.LoginRequest.SerializeToString,
            protos_dot_lms__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Post(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Post',
            protos_dot_lms__pb2.PostRequest.SerializeToString,
            protos_dot_lms__pb2.PostResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Get',
            protos_dot_lms__pb2.GetRequest.SerializeToString,
            protos_dot_lms__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Grade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Grade',
            protos_dot_lms__pb2.GradeRequest.SerializeToString,
            protos_dot_lms__pb2.GradeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLlmAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/GetLlmAnswer',
            protos_dot_lms__pb2.LMS_LLMQueryRequest.SerializeToString,
            protos_dot_lms__pb2.LMS_LLMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnswerQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/AnswerQuery',
            protos_dot_lms__pb2.AnswerQueryRequest.SerializeToString,
            protos_dot_lms__pb2.AnswerQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LLMStub(object):
    """LLM service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLLMAnswerResponse = channel.unary_unary(
                '/lms.LLM/GetLLMAnswerResponse',
                request_serializer=protos_dot_lms__pb2.LLMQueryRequest.SerializeToString,
                response_deserializer=protos_dot_lms__pb2.LLMResponse.FromString,
                _registered_method=True)


class LLMServicer(object):
    """LLM service definition
    """

    def GetLLMAnswerResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LLMServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLLMAnswerResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLLMAnswerResponse,
                    request_deserializer=protos_dot_lms__pb2.LLMQueryRequest.FromString,
                    response_serializer=protos_dot_lms__pb2.LLMResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.LLM', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.LLM', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LLM(object):
    """LLM service definition
    """

    @staticmethod
    def GetLLMAnswerResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LLM/GetLLMAnswerResponse',
            protos_dot_lms__pb2.LLMQueryRequest.SerializeToString,
            protos_dot_lms__pb2.LLMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RaftStub(object):
    """Raft implementation:

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.requestVote = channel.unary_unary(
                '/lms.Raft/requestVote',
                request_serializer=protos_dot_lms__pb2.VoteRequest.SerializeToString,
                response_deserializer=protos_dot_lms__pb2.VoteResponse.FromString,
                _registered_method=True)
        self.appendEntries = channel.unary_unary(
                '/lms.Raft/appendEntries',
                request_serializer=protos_dot_lms__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=protos_dot_lms__pb2.AppendEntriesResponse.FromString,
                _registered_method=True)
        self.getLeader = channel.unary_unary(
                '/lms.Raft/getLeader',
                request_serializer=protos_dot_lms__pb2.Empty.SerializeToString,
                response_deserializer=protos_dot_lms__pb2.LeaderResponse.FromString,
                _registered_method=True)


class RaftServicer(object):
    """Raft implementation:

    """

    def requestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def appendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLeader(self, request, context):
        """New RPC method
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'requestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.requestVote,
                    request_deserializer=protos_dot_lms__pb2.VoteRequest.FromString,
                    response_serializer=protos_dot_lms__pb2.VoteResponse.SerializeToString,
            ),
            'appendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.appendEntries,
                    request_deserializer=protos_dot_lms__pb2.AppendEntriesRequest.FromString,
                    response_serializer=protos_dot_lms__pb2.AppendEntriesResponse.SerializeToString,
            ),
            'getLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.getLeader,
                    request_deserializer=protos_dot_lms__pb2.Empty.FromString,
                    response_serializer=protos_dot_lms__pb2.LeaderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.Raft', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.Raft', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Raft(object):
    """Raft implementation:

    """

    @staticmethod
    def requestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.Raft/requestVote',
            protos_dot_lms__pb2.VoteRequest.SerializeToString,
            protos_dot_lms__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def appendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.Raft/appendEntries',
            protos_dot_lms__pb2.AppendEntriesRequest.SerializeToString,
            protos_dot_lms__pb2.AppendEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.Raft/getLeader',
            protos_dot_lms__pb2.Empty.SerializeToString,
            protos_dot_lms__pb2.LeaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
